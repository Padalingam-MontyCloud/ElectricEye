AWSTemplateFormatVersion: 2010-09-09
Description: >-
  This Template will create the supporting infrastructure for the
  Day2-SecurityBot ChatOps module to send Security Hub findings to Slack and
  Teams
Metadata:
  License: GPL-3.0
Parameters:
  NotificationParameters:
    Type: String
    Description: >-
      The names of the SSM Parameter that contains the Slack App Webhook and
      Teams URL for SecurityBot-ChatOps
    Default: slackwebhookParam
  SeverityLevel:
    Type: CommaDelimitedList
    Description: 'Choose among CRITICAL,HIGH,MEDIUM'
    Default: 'CRITICAL,HIGH,MEDIUM'
Resources:
  SecurityBotChatOpsLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: SecurityBot-ChatOps
      Description: >-
        Sends the results of high-severity SecurityBot findings to a Slack
        Channel - Managed by Day2
      Handler: index.lambda_handler
      MemorySize: 256
      Role: !Sub >-
        arn:aws:iam::${AWS::AccountId}:role/MontyCloud-SecurityBotChatOpsExecRole
      Runtime: python3.7
      Timeout: 60
      Environment:
        Variables:
          NOTIFICATION_PARAMETER: !Ref NotificationParameters
      Code:
        ZipFile: |
          import os
          import boto3
          import json
          import urllib3
          import logging

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)


          def lambda_handler(event, context):
              # create ssm client
              ssm = boto3.client('ssm')
              # create env var for SSM Parameter containing Slack Webhook URL
              notification_parameters = os.environ['NOTIFICATION_PARAMETER']
              http = urllib3.PoolManager()
              # retrieve slack webhook from SSM
              slack_hooks = []
              teams_hooks = []
              try:
                  response = ssm.get_parameter(Name=notification_parameters, WithDecryption=True)
                  response_object = str(response['Parameter']['Value'])
                  response_object_dict = json.loads(response_object)
                  slack_hooks = response_object_dict.get('slack_hooks')
                  teams_hooks = response_object_dict.get('teams_hooks')
              except Exception as e:
                  logger.exception(e)
              notification_headers = {'Content-Type': 'application/json'}
              for findings in event['detail']['findings']:
                  severityLabel = str(findings['Severity']['Label'])
                  electricEyeCheck = str(findings['Title'])
                  awsAccountId = str(findings['AwsAccountId'])
                  for resources in findings['Resources']:
                      resourceId = str(resources['Id'])
                      Message = 'A new ' + severityLabel + ' severity finding for ' + resourceId + ' in acccount ' + awsAccountId + ' has been created in Security Hub due to failing the check: ' + electricEyeCheck
                      message = {'text': Message}
                      for webhook in slack_hooks:
                          status = http.request('POST', webhook, headers=notification_headers, body=json.dumps(message).encode('utf-8'))
                          logger.info(status)
                      for channel in teams_hooks:
                          status = http.request('POST', channel, headers=notification_headers, body=json.dumps(message).encode('utf-8'))
                          logger.info(status)
  SecurityBotChatOpsCWEPermissions:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName:
        Ref: SecurityBotChatOpsLambdaFunction
      Action: 'lambda:InvokeFunction'
      Principal: events.amazonaws.com
      SourceArn:
        'Fn::GetAtt':
          - SecurityBotChatOpsEventRule
          - Arn
  SecurityBotChatOpsEventRule:
    Type: 'AWS::Events::Rule'
    Properties:
      Name: SecurityBot-ChatOps-EventRule
      Description: >-
        Sends the results of high-severity SecurityBot findings to a Slack
        Channel,Teams via Lambda
      EventPattern:
        source:
          - aws.securityhub
        detail-type:
          - Security Hub Findings - Imported
        detail:
          findings:
            ProductFields:
              Product Name:
                - Day2SecurityBot
            Severity:
              Label: !Ref SeverityLevel
      State: ENABLED
      Targets:
        - Arn:
            'Fn::GetAtt':
              - SecurityBotChatOpsLambdaFunction
              - Arn
          Id: SecurityBot_ChatOps_CWE
        - Arn: !Sub >-
            arn:aws:sns:${AWS::Region}:${AWS::AccountId}:MontyCloud-Automation-Task-Notification-Topic
          Id: MontyCloud-Notification-Topic
