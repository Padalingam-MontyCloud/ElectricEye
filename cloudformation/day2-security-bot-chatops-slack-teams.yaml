AWSTemplateFormatVersion: 2010-09-09
Description: >-
  This Template will create the supporting infrastructure for the
  Day2-SecurityBot ChatOps module to send Security Hub findings to Slack and
  Teams
Metadata:
  License: GPL-3.0
Parameters:
  NotificationParameters:
    Type: String
    Description: >-
      The names of the SSM Parameter that contains the Slack App Webhook and
      Teams URL for SecurityBot-ChatOps
    Default: slackwebhookParam
  SeverityLevel:
    Type: CommaDelimitedList
    Description: 'Choose among CRITICAL,HIGH,MEDIUM,LOW and INFORMATIONAL'
    Default: 'CRITICAL,HIGH,MEDIUM,LOW,INFORMATIONAL'
Resources:
  SecurityBotChatOpsLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: SecurityBot-ChatOps
      Description: >-
        Sends the results of high-severity SecurityBot findings to a Slack
        Channel - Managed by Day2
      Handler: index.lambda_handler
      MemorySize: 256
      Role: !Sub >-
        arn:aws:iam::${AWS::AccountId}:role/MontyCloud-SecurityBotChatOpsExecRole
      Runtime: python3.7
      Timeout: 60
      Environment:
        Variables:
          NOTIFICATION_PARAMETER: !Ref NotificationParameters
      Code:
        ZipFile: |
          import os
          import boto3
          import json
          import urllib3
          import logging

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)



          def lambda_handler(event, context):
              # create ssm client
              ssm = boto3.client('ssm')
              # create env var for SSM Parameter containing Slack Webhook URL
              notification_parameters = os.environ['NOTIFICATION_PARAMETER']
              http = urllib3.PoolManager()
              # retrieve slack webhook from SSM
              slack_hooks = []
              teams_hooks = []
              try:
                  response = ssm.get_parameter(Name=notification_parameters, WithDecryption=True)
                  response_object = str(response['Parameter']['Value'])
                  response_object_dict = json.loads(response_object)
                  slack_hooks = response_object_dict.get('slack_hooks')
                  teams_hooks = response_object_dict.get('teams_hooks')
              except Exception as e:
                    logger.exception(e)

              notification_headers = {'Content-Type': 'application/json'}
              color_progression = {
                  'LOW': '#2E89CC',
                  'MEDIUM': '#F39C12',
                  'HIGH': '#E74C3C',
                  'CRITICAL': '#A93226',
                  'INFORMATIONAL': '#2ECC71'
                      }
              for findings in event['detail']['findings']:
                  if findings.get("Compliance").get("Status") == "FAILED":
                      severityLabel = str(findings['Severity']['Label'])
                      severityColor = color_progression.get(severityLabel,"#CACFD2")
                      electricEyeCheck = str(findings['Title'])
                      awsAccountId = str('*')+str(findings['AwsAccountId'])+str('*')
                      for resources in findings['Resources']:
                          resourceId = str('*')+str(resources['Id'])+str('*')
                          Message = 'A new ' + severityLabel + ' severity finding for ' + resourceId + ' in account ' + awsAccountId + ' has been found failing the check: ' +electricEyeCheck
                          slack_payload = {
                              "username": "DRBOT",
                              "text": "DAY2™ SecurityBot",
                              "type": "plain_text",
                              "attachments": [
                                  {
                                      "color": severityColor,
                                      "text": Message,
                                  }
                              ]
                          }
                          teams_payload = {
                              "title": "DAY2™ SecurityBot",
                              "type": "plain_text",
                               "text": Message,
                              "themeColor": severityColor
                          }


                          for slackwebhook_object in slack_hooks:
                              for slackseverity in slackwebhook_object.get("severity"):
                                  if slackseverity == severityLabel:
                                      logger.info("slack severity match found " + str(slackwebhook_object.get("severity")) + " " + severityLabel)
                                      status = http.request('POST', slackwebhook_object.get("webhook"), headers=notification_headers, body=json.dumps(slack_payload).encode('utf-8'))
                                      logger.info(status)
                                  else:
                                      logger.info("severityLabel doesn't match the slack_hooks severity " + str(slackwebhook_object.get("severity")) + " " + severityLabel)
                          for teamhook_object in teams_hooks:
                              for teamsseverity in teamhook_object.get("severity"):
                                  if teamsseverity == severityLabel:
                                      logger.info("team severity match found "+ str(teamhook_object.get("severity")) +" " +severityLabel)
                                      status = http.request('POST', teamhook_object.get("webhook"), headers=notification_headers, body=json.dumps(teams_payload).encode('utf-8'))
                                      logger.info(status)
                                  else:
                                      logger.info("severityLabel doesn't match the teams_hooks severity " + str(teamhook_object.get("severity")) + " " + severityLabel)
                  else:
                      logger.info("Compliance Status is either failed or None "+findings.get("Compliance").get("Status"))
  SecurityBotPagerDutyLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: SecurityBot-PagerDuty
      Description: >-
        Sends the results of high-severity SecurityBot findings to a PagerDuty
      Handler: index.lambda_handler
      MemorySize: 256
      Role: !Sub >-
        arn:aws:iam::${AWS::AccountId}:role/MontyCloud-SecurityBotChatOpsExecRole
      Runtime: python3.7
      Timeout: 60
      Environment:
        Variables:
          NOTIFICATION_PARAMETER: !Ref NotificationParameters
      Code:
        ZipFile: |
          import os
          import boto3
          import json
          import urllib3
          import logging

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def lambda_handler(event, context):
              ssm = boto3.client('ssm')
              notification_parameters = os.environ['NOTIFICATION_PARAMETER']
              http = urllib3.PoolManager()
              pagerduty_hooks = []
              try:
                  response = ssm.get_parameter(Name=notification_parameters, WithDecryption=True)
                  response_object = str(response['Parameter']['Value'])
                  response_object_dict = json.loads(response_object)
                  pagerduty_integration_keys = response_object_dict.get('pagerduty_hooks')
              except Exception as e:
                    logger.exception(e)

              notification_headers = {'Content-Type': 'application/json'}
              color_progression = {
                  'LOW': '#2E89CC',
                  'MEDIUM': '#F39C12',
                  'HIGH': '#E74C3C',
                  'CRITICAL': '#A93226',
                  'INFORMATIONAL': '#2ECC71'
                      }
              pager_duty_severity = {
                  'CRITICAL': 'critical',
                  'HIGH': 'error',
                  'MEDIUM': 'warning',
                  'LOW': 'warning',
                  'INFORMATIONAL': 'info'
                }
              for findings in event['detail']['findings']:
                  if findings.get("Compliance").get("Status") == "FAILED":
                      severityLabel = str(findings['Severity']['Label'])
                      severityColor = color_progression.get(severityLabel,"#CACFD2")
                      electricEyeCheck = str(findings['Title'])
                      awsAccountId = str('*')+str(findings['AwsAccountId'])+str('*')
                      for resources in findings['Resources']:
                          resourceId = str('*')+str(resources['Id'])+str('*')
                          Message = 'A new ' + severityLabel + ' severity finding for ' + resourceId + ' in account ' + awsAccountId + ' has been found failing the check: ' +electricEyeCheck
                          pagerdutyEvent = {
                              "payload": {
                                  "summary": 'AWS account ' + awsAccountId + ' has failed DAY2™ check ' + electricEyeCheck,
                                  "source": "DAY2™",
                                  "severity": pager_duty_severity.get(severityLabel),
                                  "component": resourceId,
                                  "class": "Security Hub Finding",
                                  "custom_details": {
                                      "finding_description": findingDescription,
                                      "aws_account_id": awsAccountId,
                                      "security_hub_severity": severityLabel,
                                      "remediation_text": remediationReccText,
                                      "remediation_url": remediationReccUrl,
                                      "resource_type": resourceType
                                  }
                              },
                              "dedup_key": findingId,
                              "event_action": "trigger"
                              }
                          pdEventApiv2Url = 'https://events.pagerduty.com/v2/enqueue'
                          for pagerduty_object in pagerduty_integration_keys:
                              pdHeaders = {
                                  'Content-Type': 'application/json',
                                  'X-Routing-Key': pagerduty_object.get("integration_key")
                                          }
                              for pdseverity in pagerduty_object.get("severity"):
                                  if pdseverity == severityLabel:
                                     logger.info(str(pagerduty_object.get("severity")) + " " + severityLabel)
                                     status = http.request('POST', pdEventApiv2Url, headers=pdHeaders, body=json.dumps(pagerdutyEvent).encode('utf-8'))
                                     logger.info(status)
                                  else:
                                      logger.info("severityLabel doesn't match the pagerduty severity " + str(pagerduty_object.get("severity")) + " " + severityLabel)
                  else:
                      logger.info("Compliance Status is either failed or None "+findings.get("Compliance").get("Status"))
  SecurityBotChatOpsCWEPermissions:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName:
        Ref: SecurityBotChatOpsLambdaFunction
      Action: 'lambda:InvokeFunction'
      Principal: events.amazonaws.com
      SourceArn:
        'Fn::GetAtt':
          - SecurityBotChatOpsEventRule
          - Arn
  SecurityBotChatOpsEventRule:
    Type: 'AWS::Events::Rule'
    Properties:
      Name: SecurityBot-ChatOps-EventRule
      Description: >-
        Sends the results of high-severity SecurityBot findings to a Slack
        Channel,Teams via Lambda
      EventPattern:
        source:
          - aws.securityhub
        detail-type:
          - Security Hub Findings - Imported
        detail:
          findings:
            ProductFields:
              Product Name:
                - Day2SecurityBot
            Severity:
              Label: !Ref SeverityLevel
      State: ENABLED
      Targets:
        - Arn:
            'Fn::GetAtt':
              - SecurityBotChatOpsLambdaFunction
              - Arn
          Id: SecurityBot_ChatOps_CWE
        - Arn:
            'Fn::GetAtt':
              - SecurityBotPagerDutyLambdaFunction
              - Arn
          Id: SecurityBot_ChatOps_PD
        - Arn: !Sub >-
            arn:aws:sns:${AWS::Region}:${AWS::AccountId}:MontyCloud-Automation-Task-Notification-Topic
          Id: MontyCloud-Notification-Topic
